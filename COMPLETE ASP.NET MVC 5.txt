COMPLETE ASP.NET MVC 5
======================

Model = app data and behavior in therms of its problem domain and independent of the ui
View = html
Controller = responsible for handling HTTP requests [vidly.com/movies]
Router = select the right controller for the route


MVC = separation of concerns

Domain Model
	Movie
	Customer
	Rental
	Transaction

POCOs (plain old CLR objects)

RouteConfig.cs
/movies/popular
	MoviesController
	Popular()

/movies/edit/1
	MoviesController
	Edit(int id)

FILE -> NEW -> PROJECT -> ASP.NET Web Application (.NET Framework)

Models -> Add Class -> Movie
	public int Id { get; set; }
	public string Name { get; set; }

Controllers -> Add Controller -> MoviesController
	var movie = new Movie() { Name = "Shrek!" };
	return View(movie);

Views -> Movies -> Add View
	Random
	Layout: ~/Views/Shared/_Layout.cshtml

Random.cshtml
@model Vidly.Models.Movie

<h2>@Model.Name</h2>

-----

CTRL-SHIFT-B Rebuild, then refresh

Action Results
--------------
	Type					Helper Method
	ViewResult				View()
	PartialViewResult		PartialView()
	ContentResult			Content()
	RedirectResult			Redirect()
	RedirectToRouteResult	RedirectToAction()
	JsonResult				Json()
	FileResult				File()
	HttpNotFoundResult		HttpNotFound()
	EmptyResult

return Content("Hello World");
return HttpNotFound();
return EmptyResult();
return RedirectToAction("Index", "Home", new { page = 1, sortBy = "name"});

Action Parameters
-----------------
	Inputs for actions
	Request -> MVC Framework -> Action
	In the URL [/movies/edit/1]
	In the query string [/movies/edit?id=1]
	In the form data [id=1]
        public ActionResult Edit(int id)
        {
            return Content("id=" + id);
        }

with int parameters use ? to make it nullable
        public ActionResult Index(int? pageIndex, string sortBy)
        {
            if (!pageIndex.HasValue)
                pageIndex = 1;

            if (String.IsNullOrWhiteSpace(sortBy))
                sortBy = "Name";

            return Content(String.Format("pageIndex={0}&sortBy={1}", pageIndex, sortBy));
        }

Convention Based Routing
------------------------

Order matters with routes, define most specific to most generic

mvcaction4 snipped to quickly create an action

Example of regex to handle routes:

            routes.MapRoute(
                "MoviesByReleaseDate",
                "movies/released/{year}/{month}",
                new {controller = "Movies", action = "ByReleaseDate"},
                new {year = @"\d{4}", month = @"\d{2}"});

Attribute Routing
-----------------

That MapRoute above is old way of doing it, new way is above the method in the controller:

[Route("movies/released/{year:regex(\\d{4})/{month:regex(\\d{2}):range(1, 12)}")]
public ActionResult ByReleaseDate(int year, int month)

Constraints:
	min
	max
	minlength
	maxlength
	int
	float
	guid

Attribute Route Contraints

Passing Data to the Views
-------------------------

ViewData["RandomMovie"] = movie;
ViewBag.RandomMovie = movie;

Dont use ViewData or ViewBag, use @model @Model

var viewResult = new ViewResult();
viewResult.ViewData.Model
ViewDataDictionary
Use it like a dictionary

ViewModels
----------

A viewModel is a model specifically build for a view (sometimes cross-domain like Movies and Customers who have rented a movie)
Include data  and rules specific to that view

Partial Views
-------------

CTRL-M-M to collapse/expand sections
@RenderBody() What we place in our views is rendered here
_partials start with _ naming convention

Right click Views -> Add -> View -> Check Partial

@Html.Partial("_NavBar") // loads your partial, second param can be a model you pass to it

Working With Data
-----------------

Entity Framework is an ORM, used to connect to DBs

Objects -> ORM -> Relational Data

Higher 
DbContext = gateway to our database
DbSet = tables
LINQ -> DbSet -> SQL -> DB
CRUD -> DbSet -> SQL -> DB

DB First vs Code First

DBFirst
Domain Classes <- Entity Framework <- Database
CodeFirst
Domain Classes -> Entity Framework -> Database

CodeFirst for the win

Code-First Migrations
---------------------
Tools -> Nuget package manager -> Console
enable-migrations
Creates Migrations folder
add-migration InitialModel
New cs class is created in Migrations
Part of ASP.NET identity [adds IdentityModels.cs]
After you add new props/fields you can reload with: add-migration InitialModel -force
Click yes to reload
update-database creates App_Data [click show all files]
aspnet-xxyyzz.mdf will show the db structure
Dont mess with __MigrationHistory table

Changing the Model
------------------

Aim for small migrations

Add prop:
public bool IsSubscribedToNewsLetter { get; set; }
add-migration IsSubscribedToCustomer
update-database 
Incremental history
In EF every entity must have a key (usually called id or something with id)
EF recognizes foreign keys using ClassNameId convention
public byte MemberShipTypeId { get; set; } 

For each class and smallish set of props / model changes
add-migration ClassOrPropNames
update-database

Seeding the Database
--------------------

In code first you dont create tables and insert records, data is only added by migration

add-migration [nameofdbchanges]
it will open a cs file
Sql("INSERT INTO MembershipTypes (Id, DurationInMonths, DiscountRate) VALUES (1, 0, 0, 0");
then run update-database
boom records inserted

Overriding Conventions
----------------------

Sets DB data types

using System.ComponentModel.DataAnnotations;

	[Required]
        [StringLength(255)]
        public string Name { get; set; }

Fluent API

Querying Objects
----------------

CustomersController
         private ApplicationDbContext _context;

         public CustomersController()
         {
             _context = new ApplicationDbContext();
         }

         protected override void Dispose(bool disposing)
         {
             _context.Dispose();
         }

ViewResult
var customers = _context.Customers;

ActionResult
var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

These dont execute until we iterate over them in the view.

Eager Loading
-------------
This is when you want to load objects attached to an object (MembershipType.DiscountRate when iterating through Customers)

Added to CustomersController.cs: 

using System.Data.Entity;
var customers = _context.Customers.Include(c => c.MembershipType).ToList();

To include membershiptype discountrate in view:

<td>@customer.MembershipType.DiscountRate%</td>

Shortcut to Package Manager Console
-----------------------------------
Tools -> Options -> Environment -> Keyboard: packagemanagerconsole Alt+/,Alt+.


